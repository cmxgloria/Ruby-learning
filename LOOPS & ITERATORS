
Danger: Infinite Loops!
```
i = 0
while i < 5
  puts i
  # Add your code here!
  i=i+1
  
end
```

The 'Until' Loop
```
counter = 1
until counter > 10
  puts counter
  # Add code to update 'counter' here!
  counter += 1
end
```

More Assignment Operators
 +=, -=, *=, and /=.
 
 The 'For' Loop
 ```
 for num in 1...10
  puts num
end
#1 2 3 4 5 6 7 8 9
```

Inclusive and Exclusive Ranges
The reason this program counted to 9 and not 10 was that we used three dots in the range; this tells Ruby to exclude the final number in the count: for num in 1...10 means “go up to but don’t include 10.” If we use two dots, this tells Ruby to include the highest number in the range.
```
for num in 1..15
  puts num
end
# print 1 to 15 includidng
```

Building Your Own
```
for num in 1..20
   puts num
 end
 ```
 The Loop Method
 loop { print "Hello, world!" }
In Ruby, curly braces ({}) are generally interchangeable with the keywords do (to open the block) and end (to close it). Knowing this, we can write a smarter loop than the one above: rb i = 0 loop do i += 1 print "#{i}" break if i > 5 end

The break keyword is our Get Out of Jail Free card: it breaks a loop as soon as its condition is met.
```
i = 20
loop do 
  i -= 1
  print "#{i}"
 break if i <= 0
end
# 191817161514131211109876543210
```

Next!
```
i = 20
loop do
  i -= 1
  next if i % 2 != 0
  print "#{i}"
  break if i <= 0
end
#181614121086420
```
 sample
 ```
 for i in 1..5
  next if i%2==0
  print i
end
#135
```




















